#+TITLE: Way to AOSC OS Maintainer: Basics
#+DESCRIPTION: This article is sponsered by Commit-O-Matic™
#+DATE: 2020-02-16T17:50:40
#+STARTUP: indent
#+TOC: true

#+BEGIN_QUOTE
So you want to make a package, you got the urge to make a package, you got the nerve to make a package, so go ahead...
#+END_QUOTE

* Introduction
Building system: 
+ ciel
  - Used to manage nspawn containers.
+ acbs
  - Manage tree (like our main tree, aosc-os-acbs)
  - Call Autobuild3 to (actually) build the thing
+ Autobuild3
  - Actually read the package info and run the build script
+ pushpkg
  - Push the built package to the official repository


** Release model
AOSC OS uses a semi-rolling release model. That is, there's no version numbers for AOSC OS (similar to rolling release distros like Arch Linux). However, the does not goes into stable repository immediately. Instead, they have to go through a process until finally get their way into the stable repository.

There are three main useable branches, =stable= and =testing=, and three branchs mainly used for development: =stable-proposed=, =testing-proposed= and =explosive=.

=stable-proposed= is always open for updates, and only security updates is allowed to be pushed directly to this branch. This branch will be merged to =stable= weekly.

=testing-proposed= is the place where new packages and major updates are introduced. This is where most of the work takes place. The developemnt on this branch follows a three-month iteration schedule. At the first two months, developers test the new releases and update them in =testing-proposed= branch. 

At the beginning of the last month, =testing-proposed= get merged into =testing=. During this month, users who enables =testing= repository will receive the updated packages and test them. If everything goes well, at the end of the month, =testing= will be merged into =stable= and thus complete the cycle.

* Set up environment
The first thing is to install =ciel= on the computer. On AOSC OS, just install ciel from the official repository.

Since we are going to use ciel to manage the build environment, the build process does not have to happen on an AOSC machine. If you are using Arch Linux, you can install ciel from AUR.

Then, we need to create a workspace for ciel. I'll use ~~/ciel~ for demonstration. Notice that ciel will need to be root.

#+BEGIN_SRC bash
mkdir ~/ciel
cd ~/ciel
ciel init
#+END_SRC

Now, we can load the BuildKit. BuildKit is a minimal AOSC OS variant for the sole purpose to build packages. It contains acbs and Autobuild3, so no additional installation is required.

#+BEGIN_SRC bash
ciel load-os
# Or if you have already downloaded BuildKit
ciel load-os PATH_TO_BUILDKIT
#+END_SRC

It is always a good idea to keep the OS up-to-date.

#+BEGIN_SRC bash
ciel update-os
#+END_SRC

The next step is to load an acbs tree. For this instance, we will work on the official =aosc-os-acbs= tree.

#+BEGIN_SRC bash
ciel load-tree # By default, ciel will load the official tree.
# Or, you can just clone the desired repository to ciel/TREE
#+END_SRC

* Build our very first package!
Now we have a build environment set-up, we can try to build a package that is already in the tree. Let's build a trivial one, =flac=.

Before that, we need to create an instance for ciel. It is recommended to use separate instance for different branches. Run:

#+BEGIN_SRC bash
ciel add stable # Since we are going to build on stable
#+END_SRC

And make sure we are actually on the stable branch.

#+BEGIN_SRC bash
cd TREE
git checkout stable
#+END_SRC

Then, we need to configure ciel to use the correct repositories. In order to prevent incorrect dependencies, the build environment should use packages that matches the branch. For example, we need =stable= repository to build ~stable~ tree, and =testing= and =stable= to build ~testing~ packages.

#+BEGIN_SRC bash
ciel config -i stable
#+END_SRC

First enter your info, whether to enable DNSSEC. And when ciel ask if you want to edit ~source.list~, say yes, and modify.

#+BEGIN_SRC INI
# For building stable packages
deb https://repo.aosc.io/debs stable main

# For building testing packages
deb https://repo.aosc.io/debs testing main
deb https://repo.aosc.io/debs stable-proposed main
deb https://repo.aosc.io/debs stable main

# And you get the idea.
#+END_SRC

Now we can actually build the package! Simply type:

#+BEGIN_SRC bash
ciel build -i stable flac
# -i is used to select the instance used to build
#+END_SRC

If there's no error seen and a =Build Summary= is present, it is a success! You should be able to find the generated deb inside ~OUTPUT/debs~.

* Add a new package
But surely you won't be satisfied by simply building existing packages right? Here we will discover how to construct a new package from scratch.

Dive into the =TREE= folder, you will find a lot of categories of folders, including some begins with =core-= and some begins with =extra-=. These folders are for organizing purposes, and inside them you will find the actual package building files.

We will still use ~i3~ as an example. This package can be found at ~TREE/extra-wm/i3~ for obvious reasons. Upon entering the directory, you should see such file structure:

#+BEGIN_SRC 
.
├── autobuild
│   ├── beyond
│   ├── conffiles
│   ├── defines
│   ├── overrides
│   │   └── usr
│   │       ├── bin
│   │       │   └── i3exit
│   │       └── share
│   │           └── pixmaps
│   │               └── i3-logo.svg
│   ├── patches
│   │   └── 0001-Use-OVER-operator-for-drawing-text.patch
│   └── prepare
└── spec
#+END_SRC

We will go through which each file is for.

** ~spec~
This file is responsible for telling =acbs= where to download the source file, and the version information. A basic ~spec~ file should look like this:

#+BEGIN_SRC bash
VER=4.17.1  # Version of the software
# REL=0 The package revision. If not specified, it's 0.
SRCTBL="https://i3wm.org/downloads/i3-$VER.tar.bz2" # Download address for the source code
CHKSUM="sha256::1e8fe133a195c29a8e2aa3b1c56e5bc77e7f5534f2dd92e09faabe2ca2d85f45" # Checksum of the source tarbell
#+END_SRC

One thing worth noting is the revision number. You can ignore this line if you are creating a new package, but sometimes (like applying an emergency security patch), the version number is not changed, but we still need to inform the package manager on users computer that there is an update available. In these circumstances, just increase the REL by 1. 

** ~autobuild/~ directory
This is the directory where all the =Autobuild3= scripts lives. =Autobuild3= is a sophisticated build system that can automatically determine things, like which build system to use, which build parameter to use, and so on.

** ~autobuild/defines~
This file contains the core configuration like:
+ ~PKGNAME~ : Package name 
+ ~PKGDES~ : Package description 
+ ~PKGSEC~ : Section where the package belongs to
+ ~PKGDEP~ : Package dependencies 
+ ~PKGCONFL~ : Package conflicts 
+ ~BUILDDEP~ : Build dependencies (packages which are required during build, but not use)
+ ~PKGRECOM~ : Not mandatory, but recommended dependencies

These are only the most common configuration entries. There are also more configurations, but if the software is fairly standard, these configuration would be enough. Other information like which C compiler flags to use, which build system to use, can be filled automatically by =Autobuild=.

Here is a basic example taken from ~TREE/extra-multimedia/flac~:

#+BEGIN_SRC bash
PKGNAME=i3
PKGSEC=x11
PKGDEP="dmenu libev libxkbcommon pango perl-anyevent-i3 perl-json-xs \
        startup-notification xcb-util-cursor xcb-util-keysyms \
        xcb-util-wm yajl xcb-util-xrm"
PKGRECOM="i3lock i3status"
BUILDDEP="graphviz doxygen xmlto"
PKGDES="Improved tiling WM (window manager)"

PKGCONFL="i3-gaps"
#+END_SRC

Notice here that you can actually write bash logic inside ~defines~. This is useful when adding platform-specific flags or dependencies, but this is *NOT* a recommended action, and will be prohibited in the future. For adding platform specific info, use ~$VAR__$ARCH~.

For a complete list of available parameters, visit [[https://github.com/AOSC-Dev/aosc-os-abbs/wiki/Autobuild3][Wiki for Autobuild3]].

** ~autobuild/prepare~
This file is the script that will be executed before the build process begins. Usually it is used to prepare files or set environment variables used in the build process.

** ~autobuild/patches/~
This is a directory containing all the patches that will be applied to the source codes before the build.

Simple as drop it in. :)

* A complete example: ~light~
That's all the basic knowledge you need to build a simple package! Now, we will try to build a really simple program: [[https://github.com/haikarainen/light][light]].

This program is used to provide a easy command to control the backlight of laptop. Since it only uses file API to interact with the backlight subsystem, this program is very simple and does not require and dependency other that =glibc=. So, we choose this as our example program.

Return to the TREE (assuming you have ciel set-up). First, make sure that you are on the right branch. For the first two months of the cycle, use =testing-proposed=. For the last month, use =explosive=.

Since this program is obviously a utility, we create a directory called ~light~ under the directory ~TREE/extra-utils~.

#+BEGIN_SRC bash
cd TREE/extra-utils
mkdir light
cd light
#+END_SRC

Then, we create the ~spec~ file. Look up the project website, and we find out the URL and the latest version. After manually check the sha256 of the latest tarball, we can fill in the file.

#+BEGIN_SRC bash
VER=1.2.1
SRCTBL="https://github.com/haikarainen/light/archive/v$VER.tar.gz"
CHKSUM="sha256::53d1e74f38813de2068e26a28dc7054aab66d1adfedb8d9200f73a57c73e7293"
#+END_SRC

Notice here we replaced the version number inside the tarball URL with an environmental variable ~$VAR~. This is considered as a good practice (since it reduce the modification required when updating the package), and should be used when possible.

Then, we create the ~autobuild~ folder, and create the ~defines~ file.

Since this is an application used in the GUI environment, we give it the section of ~x11~. The complete ~defines~ file looks like the following:

#+BEGIN_SRC bash
PKGNAME=light
PKGSEC=x11
PKGDES="Program to easily change brightness on backlight-controllers."
#+END_SRC

And we are done! We can now head back to the base folder of ciel, and trigger:

#+BEGIN_SRC bash
ciel build -i stable light
#+END_SRC

Although we didn't write anything about how to build this program, ~Autobuild3~ automatically figured out that this should be built with ~autotools~, and build the program successfully. If you want to double check, use ~dpkg-deb -c DEB_FILE~ to check the files inside the deb file.

** git conventions
AOSC OS has strict conventions about git logs. We will only mention the most used ones here.

For example, we are adding a new package to the tree. Then the log should be something like this:

#+BEGIN_SRC 
light: new, 1.2.1
$PKG_NAME: new, $VER
#+END_SRC

If you are updating the version of an exisiting package, it should be like this:

#+BEGIN_SRC 
bash: update to 5.2
$PKG_NAME: update to $NEW_VER
#+END_SRC

** Push built package to main repository
After a successful build, maintainers will push local git changes to the main repository the package to the official repository.

The second task can be done using [[https://github.com/AOSC-Dev/scriptlets/tree/master/pushpkg][pushpkg]]. Grab the script, add the script to PATH, make sure it has execute permission, then trigger ~pushpkg~ inside the =OUTPUT= directory. You will need to provide your LDAP credential and the destination repository.

* Epilogue
That's it! You are now able to create a new package for AOSC OS from scratch now!

However, as you may see, this article only covers the absolute basic of what you need to know. When dealing with more complicated build systems, or updating a batch of packages, there's still many skills to learn. Please refer to the [[##][WIP: Way to AOSC OS Maintainer: Senior]]
